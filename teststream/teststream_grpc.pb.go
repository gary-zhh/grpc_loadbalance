// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package teststream

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestStreamClient is the client API for TestStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestStreamClient interface {
	// 具体的远程服务方法
	Send(ctx context.Context, opts ...grpc.CallOption) (TestStream_SendClient, error)
}

type testStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewTestStreamClient(cc grpc.ClientConnInterface) TestStreamClient {
	return &testStreamClient{cc}
}

func (c *testStreamClient) Send(ctx context.Context, opts ...grpc.CallOption) (TestStream_SendClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestStream_ServiceDesc.Streams[0], "/teststream.TestStream/Send", opts...)
	if err != nil {
		return nil, err
	}
	x := &testStreamSendClient{stream}
	return x, nil
}

type TestStream_SendClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type testStreamSendClient struct {
	grpc.ClientStream
}

func (x *testStreamSendClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testStreamSendClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestStreamServer is the server API for TestStream service.
// All implementations must embed UnimplementedTestStreamServer
// for forward compatibility
type TestStreamServer interface {
	// 具体的远程服务方法
	Send(TestStream_SendServer) error
	mustEmbedUnimplementedTestStreamServer()
}

// UnimplementedTestStreamServer must be embedded to have forward compatible implementations.
type UnimplementedTestStreamServer struct {
}

func (UnimplementedTestStreamServer) Send(TestStream_SendServer) error {
	return status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedTestStreamServer) mustEmbedUnimplementedTestStreamServer() {}

// UnsafeTestStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestStreamServer will
// result in compilation errors.
type UnsafeTestStreamServer interface {
	mustEmbedUnimplementedTestStreamServer()
}

func RegisterTestStreamServer(s grpc.ServiceRegistrar, srv TestStreamServer) {
	s.RegisterService(&TestStream_ServiceDesc, srv)
}

func _TestStream_Send_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestStreamServer).Send(&testStreamSendServer{stream})
}

type TestStream_SendServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type testStreamSendServer struct {
	grpc.ServerStream
}

func (x *testStreamSendServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testStreamSendServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestStream_ServiceDesc is the grpc.ServiceDesc for TestStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teststream.TestStream",
	HandlerType: (*TestStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Send",
			Handler:       _TestStream_Send_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "teststream.proto",
}
